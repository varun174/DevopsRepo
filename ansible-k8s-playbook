- name: installing net-tools and others
  hosts: kubernetes
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: update
      command: apt-get update

    - name: dist upgrade
      command: apt -y dist-upgrade

    - name: install net-tools
      command: apt install -y net-tools

    - name: swapoff
      command: swapoff -a

    - name: Disable SWAP in fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*$'
        line: '#\0'
        backrefs: yes


    - name: Set the first hostname in /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ control_ip }} {{ control_name }}"
        state: present
        create: yes

    - name: Set the second hostname in /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ worker_ip }} {{ worker_name }}"
        state: present
        create: yes
    - name: Load the overlay module
      ansible.builtin.shell: "modprobe overlay"
      args:
        executable: /bin/bash

    - name: Load the br_netfilter module
      ansible.builtin.shell: "modprobe br_netfilter"
      args:
        executable: /bin/bash

    - name: Ensure overlay and br_netfilter modules are loaded at boot
      ansible.builtin.copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf
        owner: root
        group: root
        mode: '0644'

    - name: Set up iptables
      ansible.builtin.copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/k8s.conf
        owner: root
        group: root
        mode: '0644'

    - name: update sysctl
      command: sysctl --system


    - name: Installation of apt-utils
      apt:
       name: apt-transport-https
       state: present
       update_cache: yes

    - name: Adding Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Adding Docker Repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Installation of containerd
      apt:
       name: containerd.io
       state: present


    - name: Setting value of SystemdCgroup
      shell: |
        containerd config default | sudo tee /etc/containerd/config.toml | grep SystemdCgroup
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

    - name : Starting Service of containerd
      service:
        name: containerd
        state: restarted
        enabled: yes

    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Download Kubernetes GPG key
      command: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key -o /tmp/kubernetes-key.gpg

    - name: Add Kubernetes GPG key to trusted keyrings
      command: sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-key.gpg

    - name: Add Kubernetes repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /
        state: present
        filename: kubernetes
        update_cache: yes


    - name: Update APT package list
      ansible.builtin.apt:
        update_cache: yes


    - name: Install kubelet and kubeadm
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - kubeadm
        - kubelet
        - kubectl

- name: setup configuration in control
  hosts: control
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: initialize K8S cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ control_ip }} --ignore-preflight-errors=all

    - name: create .kube directory and copy kube config file
      shell: "{{ item }}"
      loop:
        -  mkdir -p $HOME/.kube
        -  cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        - chown $(id -u):$(id -g) $HOME/.kube/config

    - name: install Pod network
      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml >> pod_network_setup.txt
      args:
        chdir: $HOME
        creates: pod_network_setup.txt


- name: installing net-tools and others
  hosts: kubernetes
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw
      when: "'control' in group_names"

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"
      when: "'control' in group_names"

    - name: join cluster
      shell: "{{ hostvars[control_ip].join_command }} --ignore-preflight-errors all  >> node_joined.txt"
      args:
        chdir: $HOME
        creates: node_joined.txt
      when: "'worker' in group_names"
